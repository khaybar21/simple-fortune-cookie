name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run tests
      run: cd frontend && go test

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository }}/frontend:latest

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository }}/backend:latest

    - name: start test 
      run: |
        set -e
        docker network create test-net
        docker run -d --rm --name test-redis --network test-net redis:alpine
        docker run -d --rm --name test-backend --network test-net -p 9000:9000 -e REDIS_DNS=test-redis ghcr.io/${{ github.repository }}/backend:latest
        docker run -d --rm --name test-frontend --network test-net -p 8080:8080 -e BACKEND_DNS=test-backend -e BACKEND_PORT=9000 ghcr.io/${{ github.repository }}/frontend:latest
        # give containers a moment to boot
        sleep 5

    - name: run test.sh
      run: |
        bash ./test.sh

    - name: Cleanup
      if: always()
      run: |
        docker rm -f test-frontend || true
        docker rm -f test-backend || true
        docker rm -f test-redis || true
        docker network rm test-net || true
        
    - name: Set repository name lowercase
      run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

    - name: Continuous Deployment
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
        kubectl --kubeconfig kubeconfig apply -f k8s/
